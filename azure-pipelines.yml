trigger:
  branches:
    include:
     - main
     - master

pool: Default

variables:
  Source_Code_Directory : '$(System.DefaultWorkingDirectory)/Root/Dev'
  Resource_group_Name: 'myman-rg'
  Storage_Account: 'mycvffdgfd434gffbvvbc444'
  Container_Name: 'mycontainer'
  Container_key: 'ram.terraform.tfstate'
  Service_Conn_Name: 'humAzure'
  ACR_Name: 'myacr0216'
  ACR_Repository_Name: 'myacr0216.azurecr.io/my-html-calculator:v2'
  dockerRegistryServiceConnection: 'AcrLoginSC'


stages:
- stage: InfraCreateForAKS
  displayName: "Aks Infra Create"
  jobs:
  - job: InfraJobForAks
    displayName: "Aks Infra Job"
    steps:

    # Install Terraform
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    # Terraform Init
    - script: |
        echo "Initializing Terraform..."
        terraform init
      workingDirectory: $(Source_Code_Directory)
      displayName: "Terraform Init"

    # Terraform Validate
    - script: |
        echo "Running terraform validation..."
        terraform validate
      workingDirectory: $(Source_Code_Directory)
      displayName: "Terraform Validate"

    # Terraform FMT
    - script: |
        echo "Running terraform fmt..."
        terraform fmt
      workingDirectory: $(Source_Code_Directory)
      displayName: "Terraform FMT"

    # Terraform Plan
    - script: |
        echo "Running terraform plan..."
        terraform plan
      workingDirectory: $(Source_Code_Directory)
      displayName: "Terraform Plan"

    # Terraform Apply
    - script: |
        echo "Running terraform apply..."
        terraform apply --auto-approve
      workingDirectory: $(Source_Code_Directory)
      displayName: "Terraform Apply"

    # ACR Creation (Optional â€“ usually done once)
    - script: |
        echo "Creating ACR..."
        az acr create --resource-group $(Resource_group_Name) --name $(ACR_Name) --sku Basic
      displayName: "ACR Creation"

    # ACR Login (CLI + Docker)
- stage: ACRLOGIN
  dependsOn: InfraCreateForAKS
  displayName: "Acr LOGIN"
  jobs:
    - job: ACRLOGINJOB
      displayName: "Acr login ki job"
      steps:

       - script: |
          az acr show --name myacr0216 --resource-group myman-rg -o table
          az acr login --name myacr0216
          az acr check-health -n myacr0216az --yes
          az acr login -n myacr0216 --expose-token
          
      #  - task: Docker@2
      #    inputs:
      #      containerRegistry: 'AcrLoginSC'
      #      command: 'login'

           
- stage: DockerActivity
  displayName: "Docker Activity and command for image"
  dependsOn: ACRLOGIN
  jobs:
    - job: DockerActivity
      displayName: "Docker Activity after ACR login"
      steps:
      # Docker Build
        - script: |
            echo "Building Docker image..."
            docker build -t $(ACR_Repository_Name) .
          displayName: "Docker Build"
         


      # Docker Tag and Push
        - script: |
            docker tag my-html-calculator myacr0216.azurecr.io/my-html-calculator:v2
            echo "Tagging Docker image..."
            docker login myacr0216.azurecr.io -u myacr0216 -p $(ACR_PASSWORD)
            docker push myacr0216.azurecr.io/my-html-calculator:v2
            echo "Docker image pushed to ACR"
          
           
      # Docker Pull (Verification)
        - script: |
             echo "Pulling image from ACR..."
             docker pull yacr0216.azurecr.io/my-html-calculator:v2
          displayName: "Docker Pull"

      # Docker Run (Optional)
        - script: |
            echo "Running container..."
            docker run -d -p 8082:80 --name my-app-container $(ACR_Repository_Name):v2
          displayName: "Run Docker Container"

      # Enable ACR Admin (if needed)
        - script: |
            echo "Enabling ACR admin access..."
            az acr update -n $(ACR_Name) --admin-enabled true
          displayName: "Enable ACR Admin"
  

- stage: DeployToAKS
  displayName: "Deploy to AKS"
  dependsOn: DockerActivity
  jobs:
  - job: DeployJob
    displayName: "Apply Kubernetes Manifests"
    steps:
    - task: Kubernetes@1
      displayName: 'Deploy Deployment and Service'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'k8sServiceConnec'
        namespace: 'default'
        command: 'apply'
        useConfigurationFile: true
        configuration: |
            $(System.DefaultWorkingDirectory)/Root/Dev/deployment.yaml
            $(System.DefaultWorkingDirectory)/Root/Dev/service.yaml
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'

   

        
